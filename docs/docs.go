// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Returns a 200 code and JSON with a message.",
                "summary": "Check the service's status.",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns a 200 code and JSON with the date the service started running and a description.",
                "summary": "Get the service's health status.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.HealthResponse"
                        }
                    }
                }
            }
        },
        "/recommended": {
            "get": {
                "description": "Get recommended trainings according to current ruleset.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Recommendations"
                ],
                "summary": "Get recommended trainings according to current ruleset.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Proximity rule changes",
                        "name": "user_info",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Training"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/rules/interests": {
            "get": {
                "description": "Get the current settings of the interests rule.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interests Rule"
                ],
                "summary": "Get the current settings of the interests rule.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Proximity rule changes",
                        "name": "user_info",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.InterestsRule"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "patch": {
                "description": "Update the interests rule' status for recommended trainings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interests Rule"
                ],
                "summary": "Update the interests rule' status for recommended trainings.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Proximity rule changes",
                        "name": "user_info",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Interests rule changes",
                        "name": "rule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.InterestsRule"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/rules/proximity": {
            "get": {
                "description": "Get the current settings of the proximity rule.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Proximity Rule"
                ],
                "summary": "Get the current settings of the proximity rule.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Proximity rule changes",
                        "name": "user_info",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProximityRule"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "patch": {
                "description": "Update the maximum radius for recommended trainings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Proximity Rule"
                ],
                "summary": "Update the maximum radius for recommended trainings.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Proximity rule changes",
                        "name": "user_info",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Proximity rule changes",
                        "name": "rule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ProximityRule"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.HealthResponse": {
            "type": "object",
            "properties": {
                "creation_date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "last_response": {
                    "type": "string"
                }
            }
        },
        "model.InterestsRule": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "model.ProximityRule": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "radius": {
                    "type": "integer"
                }
            }
        },
        "model.Training": {
            "type": "object",
            "properties": {
                "blocked": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "score": {
                    "type": "string"
                },
                "severity": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "trainer_id": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "type_id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Recommendation Microservice API",
	Description:      "Recommendation microservice for FiuFit's backend.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
